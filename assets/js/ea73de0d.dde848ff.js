"use strict";(self.webpackChunkVRChat_Creator_Docs=self.webpackChunkVRChat_Creator_Docs||[]).push([[6650],{11120:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>h,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"worlds/udon/avatar-events","title":"Avatar Events","description":"These events allow Udon to react to changes regarding player avatars.","source":"@site/docs/worlds/udon/avatar-events.md","sourceDirName":"worlds/udon","slug":"/worlds/udon/avatar-events","permalink":"/creator-docs_ja/worlds/udon/avatar-events","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1723066495000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Animation Events","permalink":"/creator-docs_ja/worlds/udon/animation-events"},"next":{"title":"Data Containers","permalink":"/creator-docs_ja/worlds/udon/data-containers/"}}');var n=t(74848),s=t(28453);const i={},o="Avatar Events",h={},d=[{value:"OnAvatarChanged",id:"onavatarchanged",level:2},{value:"Persisted eye heights",id:"persisted-eye-heights",level:3},{value:"OnAvatarEyeHeightChanged",id:"onavatareyeheightchanged",level:2},{value:"First avatar load",id:"first-avatar-load",level:3},{value:"Avatar changes, remote players, and event ordering",id:"avatar-changes-remote-players-and-event-ordering",level:3}];function l(e){const a={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"avatar-events",children:"Avatar Events"})}),"\n",(0,n.jsx)(a.p,{children:"These events allow Udon to react to changes regarding player avatars."}),"\n",(0,n.jsx)(a.h2,{id:"onavatarchanged",children:"OnAvatarChanged"}),"\n",(0,n.jsxs)(a.p,{children:["Returns ",(0,n.jsx)(a.code,{children:"VRCPlayerApi"})," object for the instigating player. Called when a player's avatar has finished loading."]}),"\n",(0,n.jsx)(a.h3,{id:"persisted-eye-heights",children:"Persisted eye heights"}),"\n",(0,n.jsxs)(a.p,{children:["Players will sync any variance from their prefab eye height after their avatar loads, triggering an ",(0,n.jsx)(a.code,{children:"OnAvatarEyeHeightChanged"})," event."]}),"\n",(0,n.jsxs)(a.p,{children:["If the ",(0,n.jsx)(a.code,{children:"VRCPlayerApi"})," object is for the local player, retrieving its eye height will return the prefab height during this event."]}),"\n",(0,n.jsxs)(a.p,{children:["If the ",(0,n.jsx)(a.code,{children:"VRCPlayerApi"})," object is for a remote player, be aware that the remote player may not have synced their new eye height yet, and you should not rely on the returned value in this case."]}),"\n",(0,n.jsx)(a.h2,{id:"onavatareyeheightchanged",children:"OnAvatarEyeHeightChanged"}),"\n",(0,n.jsxs)(a.p,{children:["Returns a ",(0,n.jsx)(a.code,{children:"VRCPlayerApi"})," object for the instigating player and a ",(0,n.jsx)(a.code,{children:"float"})," describing their previous or previously synced eye height in meters. Called when a player has their eye height change via switching to another avatar or via the ",(0,n.jsx)(a.a,{href:"/worlds/udon/players/player-avatar-scaling",children:"avatar scaling system"}),"."]}),"\n",(0,n.jsx)(a.h3,{id:"first-avatar-load",children:"First avatar load"}),"\n",(0,n.jsxs)(a.p,{children:["When a local or remote user joins a world, the first previous eye height value received for that user may be ",(0,n.jsx)(a.code,{children:"0"}),"."]}),"\n",(0,n.jsx)(a.h3,{id:"avatar-changes-remote-players-and-event-ordering",children:"Avatar changes, remote players, and event ordering"}),"\n",(0,n.jsxs)(a.p,{children:["When a ",(0,n.jsx)(a.strong,{children:"local"})," user changes their avatar and applies a persisted eye height (if they have one saved that differs from their prefab height), this event should only execute for their persisted height."]}),"\n",(0,n.jsxs)(a.p,{children:["When a ",(0,n.jsx)(a.strong,{children:"remote"})," user changes their avatar and applies a persisted eye height (if they have one saved that differs from their prefab eye height), this event may execute more than once."]}),"\n",(0,n.jsxs)(a.p,{children:["For remote players, you will receive this event every time a new eye height is synced to you by the remote player. This means that you could receive an ",(0,n.jsx)(a.code,{children:"OnAvatarEyeHeightChanged"})," event prior to an ",(0,n.jsx)(a.code,{children:"OnAvatarChanged"})," event, but you should not receive ",(0,n.jsx)(a.code,{children:"OnAvatarEyeHeightChanged"})," events out of order."]}),"\n",(0,n.jsx)(a.admonition,{title:"More Info",type:"note",children:(0,n.jsxs)(a.p,{children:["See ",(0,n.jsx)(a.a,{href:"/worlds/udon/players/player-avatar-scaling",children:"Player Avatar Scaling"})," for more info about this feature."]})})]})}function c(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>o});var r=t(96540);const n={},s=r.createContext(n);function i(e){const a=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(s.Provider,{value:a},e.children)}}}]);
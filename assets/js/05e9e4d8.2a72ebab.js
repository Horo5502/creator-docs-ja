"use strict";(self.webpackChunkVRChat_Creator_Docs=self.webpackChunkVRChat_Creator_Docs||[]).push([[1319],{15176:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"worlds/clientsim/systems/script-execution-order","title":"Script Execution Order","description":"| Execution Order | System Name          | Description                                                                                                                                                    |","source":"@site/docs/worlds/clientsim/systems/script-execution-order.md","sourceDirName":"worlds/clientsim/systems","slug":"/worlds/clientsim/systems/script-execution-order","permalink":"/creator-docs_ja/worlds/clientsim/systems/script-execution-order","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1737138217000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Unity Event System","permalink":"/creator-docs_ja/worlds/clientsim/systems/runtime/unity-event-system"},"next":{"title":"Examples","permalink":"/creator-docs_ja/worlds/examples/"}}');var n=r(74848),d=r(28453);const i={},o="Script Execution Order",c={},a=[];function l(e){const t={h1:"h1",header:"header",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"script-execution-order",children:"Script Execution Order"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Execution Order"}),(0,n.jsx)(t.th,{children:"System Name"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"-Infinity"}),(0,n.jsx)(t.td,{children:"UnityInputSystem"}),(0,n.jsx)(t.td,{children:"Unity InputSystem updates before all MonoBehaviours. Input from user buttons are sent to ClientSimInput and events are dispatched."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"-3000"}),(0,n.jsx)(t.td,{children:"TrackingProvider"}),(0,n.jsx)(t.td,{children:"Input is checked to update the TrackignProvider. For example: Desktop head X rotation."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"-3000"}),(0,n.jsx)(t.td,{children:"PlayerController"}),(0,n.jsx)(t.td,{children:"Update Player position before raycasting."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"-2000"}),(0,n.jsx)(t.td,{children:"PlayerRaycaster"}),(0,n.jsx)(t.td,{children:"Update the position of the PlayerHands to TrackingProvider hand data. Raycast to find interactables in the world. This must happen before EventSystems update."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"-1000"}),(0,n.jsx)(t.td,{children:"Unity Event System"}),(0,n.jsx)(t.td,{children:"Send mouse events to interact with UI. Order cannot be changed."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"0"}),(0,n.jsx)(t.td,{children:"ClientSimBehaviours"}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"0"}),(0,n.jsx)(t.td,{children:"UdonBehaviour"}),(0,n.jsx)(t.td,{children:"Send Update Events to Udon Programs."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"UdonInput"}),(0,n.jsx)(t.td,{children:"This must happen after UdonBehaviour.Update to ensure proper event order."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"10000"}),(0,n.jsx)(t.td,{children:"ClientSimBaseInput"}),(0,n.jsx)(t.td,{children:"Update current frame tick for Input Events. Only needed to ensure tests and playmode act the same relating to when Input is processed."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"30000"}),(0,n.jsx)(t.td,{children:"PlayerStationManager"}),(0,n.jsx)(t.td,{children:"Update the position of players on a station as late as possible so all other scripts have had time to evaluate first."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"30001"}),(0,n.jsx)(t.td,{children:"TooltipManager"}),(0,n.jsx)(t.td,{children:"Update the position of Tooltip visuals after finalizing the player's position."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"31000"}),(0,n.jsx)(t.td,{children:"PostLateUpdater"}),(0,n.jsx)(t.td,{children:"VRChat's PostLateUpdate event sent to UdonBehaviours."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>o});var s=r(96540);const n={},d=s.createContext(n);function i(e){const t=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(d.Provider,{value:t},e.children)}}}]);
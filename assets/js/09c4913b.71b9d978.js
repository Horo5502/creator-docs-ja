"use strict";(self.webpackChunkVRChat_Creator_Docs=self.webpackChunkVRChat_Creator_Docs||[]).push([[8118],{19696:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"worlds/udon/players/player-positions","title":"Player Positions","description":"The player\'s position, rotation, and velocity can be accessed and changed with Udon. All of the following nodes require VRCPlayerAPI as an input.","source":"@site/docs/worlds/udon/players/player-positions.md","sourceDirName":"worlds/udon/players","slug":"/worlds/udon/players/player-positions","permalink":"/creator-docs_ja/worlds/udon/players/player-positions","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1736199356000,"frontMatter":{"title":"Player Positions","slug":"player-positions","hidden":false,"createdAt":"2021-01-22T00:32:00.432Z","updatedAt":"2023-03-28T19:07:26.827Z"},"sidebar":"tutorialSidebar","previous":{"title":"Player Forces","permalink":"/creator-docs_ja/worlds/udon/players/player-forces"},"next":{"title":"AI Navigation","permalink":"/creator-docs_ja/worlds/udon/ai-navigation"}}');var r=n(74848),s=n(28453);const i={title:"Player Positions",slug:"player-positions",hidden:!1,createdAt:"2021-01-22T00:32:00.432Z",updatedAt:"2023-03-28T19:07:26.827Z"},l=void 0,a={},d=[{value:"GetPosition",id:"getposition",level:3},{value:"GetRotation",id:"getrotation",level:3},{value:"GetBonePosition",id:"getboneposition",level:3},{value:"GetBoneRotation",id:"getbonerotation",level:3},{value:"GetTrackingData",id:"gettrackingdata",level:3},{value:"GetVelocity",id:"getvelocity",level:3},{value:"SetVelocity",id:"setvelocity",level:3},{value:"IsPlayerGrounded",id:"isplayergrounded",level:3},{value:"TeleportTo",id:"teleportto",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The player's position, rotation, and velocity can be accessed and changed with Udon. All of the following nodes require ",(0,r.jsx)(t.code,{children:"VRCPlayerAPI"})," as an input."]}),"\n",(0,r.jsxs)(t.p,{children:["For nodes that deal with forces relating to Players, see ",(0,r.jsx)(t.a,{href:"/worlds/udon/players/player-forces",children:"Player Forces"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"getposition",children:"GetPosition"}),"\n",(0,r.jsx)(t.p,{children:"Gets the position of the Player."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Output"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Vector3"}),": The player's position in world space."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"getrotation",children:"GetRotation"}),"\n",(0,r.jsx)(t.p,{children:"Gets the rotation of the Player."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Input"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Output"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Quaternion"}),": The player's rotation in world space."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"getboneposition",children:"GetBonePosition"}),"\n",(0,r.jsx)(t.p,{children:"Gets the position of the specified Bone in the Player's Avatar, or Vector3.Zero (0,0,0) if the bone does not exist. Note that Avatars may not have all the same bones in the places you expect, so be careful making assumptions about attributes like a player's height, pose etc based on the position of bones."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Input"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"HumanBodyBones"}),": The bone to check."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Output"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Vector3"}),": The bone position in world space."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"getbonerotation",children:"GetBoneRotation"}),"\n",(0,r.jsx)(t.p,{children:"Gets the rotation of the specified Bone in the Player's Avatar, or Quaternion.Identity (0,0,0,1) if the bone does not exist. Note that Avatars may not have all the same bones in the places you expect, so be careful making assumptions about attributes like a player's height, pose etc based on the rotation of bones."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Output"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Quaternion"}),": The bone rotation in world space."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"gettrackingdata",children:"GetTrackingData"}),"\n",(0,r.jsx)(t.p,{children:"Gets a struct called TrackingData, which contains separate Position and Rotation data. This is the suggested way to get position and rotation data for a Player's head and hands. This returns data from the TrackingManager for a Local Player (ie the data coming from their headset / trackers) and from the RightHand, LeftHand and Head bones for a Remote Player. Origin returns the center of the local VR user's playspace, while returning the player's position for local Desktop users and all remote users. AvatarRoot returns data for the root transform of the avatar (the same transform that the player capsule is attached to). For users in Fully-Body Tracking, AvatarRoot will not rotate with the head facing direction. If you need data reflecting the general forward facing direction of a Player, consider using GetRotation instead."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Input"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"TrackingDataType"}),": The tracking data to check."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Output"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"TrackingData"}),": The player's tracking data of the specified type."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"getvelocity",children:"GetVelocity"}),"\n",(0,r.jsx)(t.p,{children:"Get the speed and direction of the player's movement."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Output"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Vector3 velocity"}),": The player's velocity in world space."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"setvelocity",children:"SetVelocity"}),"\n",(0,r.jsx)(t.p,{children:"Set the speed and direction of the player's movement. If SetVelocity is called on the local player, their 'IsGrounded' property is set to false since they are not in direct control of their movements while this is happening."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Input"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Vector3"}),": The player's velocity in world space."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"isplayergrounded",children:"IsPlayerGrounded"}),"\n",(0,r.jsx)(t.p,{children:"Get whether the player is touching the ground, which enables Jump."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Ouput"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"bool IsPlayerGrounded"}),": Whether the player is grounded."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"teleportto",children:"TeleportTo"}),"\n",(0,r.jsxs)(t.p,{children:["Send the ",(0,r.jsx)(t.a,{href:"/worlds/udon/players/getting-players/#networkingget-localplayer",children:"local player"})," to a new position and specified rotation, unless a Station does not allow it."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Udon can only teleport the local player. Use ",(0,r.jsx)(t.a,{href:"/worlds/udon/networking/",children:"networking"})," to cause other players to teleport themselves."]}),"\n",(0,r.jsx)(t.li,{children:"Stations can prevent Udon from teleporting players."}),"\n",(0,r.jsxs)(t.li,{children:["When you teleport very often or across very short distances, consider setting ",(0,r.jsx)(t.code,{children:"lerpOnRemote"})," to ",(0,r.jsx)(t.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsxs)(t.p,{children:["Do not teleport players during network updates (e.g. ",(0,r.jsx)(t.a,{href:"/worlds/udon/networking/network-components/#ondeserialization",children:"OnDeserialization"}),"). Otherwise, their avatar may unexpectedly collide with geometry during the teleport. Instead, use ",(0,r.jsx)(t.a,{href:"/worlds/udon/graph/special-nodes/#sendcustomeventdelayedframes",children:"SendCustomEventDelayedFrames"})," and delay the teleport by one frame."]})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Inputs"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Vector3 teleportPos"}),": The target position in world space."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Quaternion teleportRot"}),": The target rotation in world space."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"SceneDescriptorSpawnOrientation TeleportOrientation"})," (optional): How to align players with the destination position and rotation."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"bool lerpOnRemote"})," (optional): Whether the interpolate the player's movement for remote players.","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["(Default) If ",(0,r.jsx)(t.code,{children:"false"}),", the teleportation looks instant to remote players. The network bandwidth cost increases."]}),"\n",(0,r.jsxs)(t.li,{children:["If ",(0,r.jsx)(t.code,{children:"true,"})," the teleportation is treated like normal player movement, and movement looks smooth to remote players."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var o=n(96540);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);